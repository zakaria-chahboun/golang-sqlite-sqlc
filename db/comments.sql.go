// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: comments.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (id, text, post_id)
VALUES (new_id('c'), ?, ?)
RETURNING id, text, post_id, created_at
`

type CreateCommentParams struct {
	Text   string `json:"text"`
	PostID string `json:"post_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.queryRow(ctx, q.createCommentStmt, createComment, arg.Text, arg.PostID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.PostID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = ?
`

func (q *Queries) DeleteComment(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteCommentStmt, deleteComment, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, text, post_id, created_at
FROM comments
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id string) (Comment, error) {
	row := q.queryRow(ctx, q.getCommentStmt, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.PostID,
		&i.CreatedAt,
	)
	return i, err
}

const listCommentsInPost = `-- name: ListCommentsInPost :many
SELECT id, text, post_id, created_at
FROM comments
WHERE post_id = ?
ORDER BY created_at
`

func (q *Queries) ListCommentsInPost(ctx context.Context, postID string) ([]Comment, error) {
	rows, err := q.query(ctx, q.listCommentsInPostStmt, listCommentsInPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.PostID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
