// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package tutorial

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  text, post_id
) VALUES (
  ?, ?
)
RETURNING id, text, post_id, created_at
`

type CreateCommentParams struct {
	Text   string
	PostID int64
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.Text, arg.PostID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.PostID,
		&i.CreatedAt,
	)
	return i, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  title, text
) VALUES (
  ?, ?
)
RETURNING id, title, text, created_at
`

type CreatePostParams struct {
	Title string
	Text  string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Title, arg.Text)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = ?
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, text, post_id, created_at FROM comments
WHERE id = ? LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.PostID,
		&i.CreatedAt,
	)
	return i, err
}

const getNewName = `-- name: GetNewName :one
SELECT new_name()
`

func (q *Queries) GetNewName(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getNewName)
	var new_name interface{}
	err := row.Scan(&new_name)
	return new_name, err
}

const getPost = `-- name: GetPost :one
SELECT id, title, text, created_at FROM posts
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const listCommentsInPost = `-- name: ListCommentsInPost :many
SELECT id, text, post_id, created_at FROM comments WHERE post_id = ?
ORDER BY id
`

func (q *Queries) ListCommentsInPost(ctx context.Context, postID int64) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsInPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.PostID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, text, created_at FROM posts
ORDER BY id
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Text,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
